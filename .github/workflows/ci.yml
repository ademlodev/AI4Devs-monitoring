name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - JGA

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests
        run: |
          cd backend
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_REGION: 'eu-north-1'
        run: |
          echo "Configuring AWS CLI"
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Upload to S3
        run: |
          aws s3 cp backend/ s3://mi-ec2-con-github-actions/backend/ --recursive

      - name: Add EC2 Host Key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_INSTANCE: ${{ secrets.EC2_INSTANCE }}
          EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          echo "Deploying to EC2 instance..."
          echo "$EC2_SSH_PRIVATE_KEY" > private_key.pem
          cat private_key.pem
          chmod 600 private_key.pem  

          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_INSTANCE }} << 'EOF'
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_ID }}
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
              export AWS_REGION='us-east-1'

              # Install Nginx if not already installed
              if ! command -v nginx &> /dev/null; then
              sudo yum update
              sudo yum install -y nginx
              fi

              if ! command -v npm &> /dev/null; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              source ~/.bashrc
              nvm install --lts
              node -e "console.log('Running Node.js ' + process.version)"
              fi

              # Ensure Nginx config directory exists
              sudo mkdir -p /etc/nginx/sites-available
              sudo mkdir -p /etc/nginx/sites-enabled

              # Configure Nginx as a reverse proxy using a one-liner
              echo 'server {
                  listen 80;
                  server_name ${{ secrets.EC2_INSTANCE }};
                  
                  location / {
                      proxy_pass http://localhost:8080;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
              }' | sudo tee /etc/nginx/conf.d/app.conf > /dev/null

              # Enable the site configuration
              sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

              # Restart Nginx to apply the new configuration
              sudo systemctl restart nginx

              # Install PM2 if not already installed
              if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
              fi

              # Stop the application if it's running
              pm2 stop all || true

              # Create the directory if it doesn't exist
              mkdir -p /home/ec2-user/backend
              cd /home/ec2-user/backend

              # Download the code from S3
              aws s3 cp s3://mi-ec2-con-github-actions/backend/ . --recursive

              # Install dependencies and run the application with PM2 on port 8080
              npm install
              npm run build
              pm2 start npm --name "my-app" -- start -- --port 8080
          EOF
